plugins {
	id 'maven-publish'
	id 'java-library'
	alias libs.plugins.minotaur
	alias libs.plugins.cursegradle
	alias libs.plugins.quilt.loom
}

base {
	archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

boolean isMCVersionNonRelease() {
	return libs.minecraft.get().toString().matches('^\\d\\dw\\d\\d[a-z]$')
		|| libs.minecraft.get().toString().matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}


String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return libs.minecraft.get().toString()
	}
	def version = libs.minecraft.get().toString().split('\\.')
	return version[0] + '.' + version[1]
}

project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

repositories {
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name 'Terraformersmc'
		url 'https://maven.terraformersmc.com/'
	}
}

loom {
	mods {
		"betterleads" {
			sourceSet("main")
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	include modImplementation(libs.spruce.ui.get())
	modImplementation libs.modmenu
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

modrinth {
	projectId = project.modrinth_id
	versionName = "BetterLeads v${project.version} (${getMCVersionString()})"
	gameVersions = [libs.minecraft.get().version]
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	loaders = ["fabric", "quilt"]
	uploadFile = tasks.remapJar
	dependencies {
		required.project "fabric-api"
		optional.project "modmenu"
	}
	syncBodyFrom = rootProject.file("README.md").text

	if (!System.getenv("MODRINTH_TOKEN")) {
		project.logger.debug('MODRINTH_TOKEN is not set!')
		tasks.modrinth.setEnabled(false)
		tasks.modrinthSyncBody.setEnabled(false)
	}
}

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
	} else {
		project.logger.debug('CURSEFORGE_TOKEN is not set!')
		tasks.curseforge.setEnabled(false)
	}

	project {
		id = project.curseforge_id
		releaseType = this.getVersionType()
		addGameVersion libs.minecraft.get().version
		addGameVersion "Fabric"
		addGameVersion "Quilt"
		addGameVersion "Java 17"
		addGameVersion "Java 18"

		mainArtifact(remapJar) {
			displayName = "BetterLeads v${project.version} (${libs.minecraft.get().version})"

			relations {
				requiredDependency "fabric-api"
				optionalDependency "modmenu"
			}
		}

		afterEvaluate {
			uploadTask.setGroup("publishing")
			uploadTask.dependsOn("remapJar")
		}
	}
}
tasks.curseforge.setGroup("publishing")

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {

	}
}
