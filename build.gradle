plugins {
	id 'maven-publish'
	id 'java-library'
	id 'net.darkhax.curseforgegradle' version '1.1.+'
	alias libs.plugins.minotaur
	alias libs.plugins.quilt.loom
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

base {
	archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

if (!(System.getenv("CURSEFORGE_TOKEN") || System.getenv("MODRINTH_TOKEN"))) {
	version += "-local"
}
logger.lifecycle("Preparing version ${version}...")

boolean isMCVersionNonRelease() {
	return libs.minecraft.get().version.matches('^\\d\\dw\\d\\d[a-z]$')
		|| libs.minecraft.get().version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z\\d _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}
		return changelogContent
	} else {
		return null;
	}
}

project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

repositories {
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name 'Terraformersmc'
		url 'https://maven.terraformersmc.com/'
	}
}

loom {
	mods {
		"betterleads" {
			sourceSet("main")
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	include modImplementation(libs.spruce.ui.get())
	modImplementation libs.modmenu
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

modrinth {
	projectId = project.modrinth_id
	versionName = "BetterLeads v${project.version}"
	gameVersions = [libs.minecraft.get().version]
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	loaders = ["fabric", "quilt"]
	uploadFile = tasks.remapJar
	dependencies {
		required.project "fabric-api"
		optional.project "modmenu"
	}
	syncBodyFrom = rootProject.file("README.md").text

	if (!System.getenv("MODRINTH_TOKEN")) {
		project.logger.debug('MODRINTH_TOKEN is not set!')
		tasks.modrinth.setEnabled(false)
		tasks.modrinthSyncBody.setEnabled(false)
	}

	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

tasks.register('curseforge', TaskPublishCurseForge) {
	setGroup("publishing")

	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiToken = System.getenv("CURSEFORGE_TOKEN")
	} else {
		setEnabled(false)
		return
	}

	def changelogContent = fetchChangelog()
	if (changelogContent) {
		changelogContent = "Changelog:\n\n${changelogContent}"
	} else {
		setEnabled(false)
		return
	}

	def mainFile = upload(project.curseforge_id, tasks.remapJar)
	mainFile.releaseType = this.getVersionType()
	mainFile.addGameVersion(libs.minecraft.get().version)
	mainFile.addModLoader("Fabric", "Quilt")
	mainFile.addJavaVersion("Java 17", "Java 18")

	mainFile.displayName = "BetterLeads v${project.version}"
	mainFile.addRequirement("fabric-api")
	mainFile.addOptional("modmenu")

	mainFile.changelogType = "markdown"
	mainFile.changelog = changelogContent
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {

	}
}
